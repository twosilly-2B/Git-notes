1.安装
	a.设置名字
		git config --global user.name "Your Name"
	b.设置邮箱（email）
		git config --global user.eamil "eamil@exmail.com"

注： git config 命令的 --global 参数，表示这台机子上所有仓库都会使用这个配置，
	当然也可以对某个仓库指定不同的用户名和email！

2.创建版本库
	a.创建git仓库
		git init 通过git init命令把这个目录变成Git可以管理的仓库
		(pwd 查看当前目录)
	b.添加文件

		1.git add XXX ( xxx 指 要加入的文件名， 没有显示任何信息就是对的！ )
		2.git commit -m "这里填本次提交的说明！"
	注：
	初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：

	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

	第二步，使用命令git commit，完成。

3.状态查看
	a.查看仓库当前状态
		git status 
	b.查看文件具体状态
		git diff XXX ( XXX 文件名 ) 
	
	注：
		要随时掌握工作区的状态，使用git status命令。

		如果git status告诉你有文件被修改过，用git diff可以查看修改内容


4.版本回退
        a.查看提交日志
	        git log ( 全体显示 )命令显示从最近到最远的提交日志
		git log --pretty=oneline ( 行显示 )
	b.版本选择之往后变更（时间节点往前改）
		git reset --hard HEAD^
			( HEAD表示当前版本,上一个版本就是HEAD^,上上一个版本就是HEAD^^，
			   然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 )

	c.版本选择之往前变更（时间节点往后改）
		git reset --hard ****** ( ****** 表示commit id（版本号）)
		
	d.查看所有用过的 版本号（commit id）
		git reflog
	注：
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
		 使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
5.管理修改
	a.查看版本区别
		git diff HEAD -- XXXX ( XXXX需要对比的文件 )
	注：每次修改，如果不add到暂存区，那就不会加入到commit中。

6.撤销修改
	a.丢弃工作区的修改 ( 修改了文本还未添加到暂存区，或者添加到暂存区后没有提交的。 ) 
		git checkout -- XXXX( XXXX需要撤销的文件 ) 未提交
		   注：这里有两种情况！
		   	1.文件自修改后还没被放到暂存区，撤销修改就会到和版本库一模一样的状态。
			2.文件已经添加到暂存区后，又做了修改，撤销修改就回到添加到暂存区之后的状态。
	b.撤销暂存区的修改( 这个用在加入暂存区后，未提交给分支。即：add 后没有 commit ) 
		git reset HEAD XXXX ( XXXX文件名 )
		    注：git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
		         当我们用HEAD时，表示最新的版本。
	注：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
			用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，
			想丢弃修改，分两步，第一步用命令git reset HEAD file，
			就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，
			参考版本回退一节，不过前提是没有推送到远程库。




