1.安装
	a.设置名字
		git config --global user.name "Your Name"
	b.设置邮箱（email）
		git config --global user.eamil "eamil@exmail.com"

注： git config 命令的 --global 参数，表示这台机子上所有仓库都会使用这个配置，
	当然也可以对某个仓库指定不同的用户名和email！

2.创建版本库
		a.创建git仓库
			git init 通过git init命令把这个目录变成Git可以管理的仓库
			(pwd 查看当前目录)
		b.添加文件

			1.git add XXX ( xxx 指 要加入的文件名， 没有显示任何信息就是对的！ )
			2.git commit -m "这里填本次提交的说明！"
		注：
		初始化一个Git仓库，使用git init命令。

	添加文件到Git仓库，分两步：

	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

	第二步，使用命令git commit，完成。

3.状态查看
	a.查看仓库当前状态
		git status 
	b.查看文件具体状态
		git diff XXX ( XXX 文件名 ) 
	
	注：
		要随时掌握工作区的状态，使用git status命令。

		如果git status告诉你有文件被修改过，用git diff可以查看修改内容


4.版本回退
        a.查看提交日志
	        git log ( 全体显示 )命令显示从最近到最远的提交日志
		git log --pretty=oneline ( 行显示 )
	b.版本选择之往后变更（时间节点往前改）
		git reset --hard HEAD^
			( HEAD表示当前版本,上一个版本就是HEAD^,上上一个版本就是HEAD^^，
			   然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 )

	c.版本选择之往前变更（时间节点往后改）
		git reset --hard ****** ( ****** 表示commit id（版本号）)
		
	d.查看所有用过的 版本号（commit id）
		git reflog
	注：
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
		 使用命令git reset --hard commit_id。

		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
5.管理修改
	a.查看版本区别
		git diff HEAD -- XXXX ( XXXX需要对比的文件 )
	注：每次修改，如果不add到暂存区，那就不会加入到commit中。

6.撤销修改
	a.丢弃工作区的修改 ( 修改了文本还未添加到暂存区，或者添加到暂存区后没有提交的。 ) 
		git checkout -- XXXX( XXXX需要撤销的文件 ) 未提交
		   注：这里有两种情况！
		   	1.文件自修改后还没被放到暂存区，撤销修改就会到和版本库一模一样的状态。
			2.文件已经添加到暂存区后，又做了修改，撤销修改就回到添加到暂存区之后的状态。
	b.撤销暂存区的修改( 这个用在加入暂存区后，未提交给分支。即：add 后没有 commit ) 
		git reset HEAD XXXX ( XXXX文件名 )
		    注：git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
		         当我们用HEAD时，表示最新的版本。
	注：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
			用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，
			想丢弃修改，分两步，第一步用命令git reset HEAD file，
			就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，
			参考版本回退一节，不过前提是没有推送到远程库。

7.删除文件
	a.正常删除（从版本库中删除文件）
		第一步：git rm XXX( XXX 需要删除的文件名 )
		第二步：git commit -m "这里填操作说明"
	b.错误删除（操作失误，删除错误）
		git checkout -- XXXX （XXXX 要恢复的文件名）具体说明请看上一节 “6.撤销修改”
			小注：git checkout其实是用版本库里的版本替换工作区的版本，
				无论工作区是修改还是删除，都可以“一键还原”。
	注：命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，
		那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，
		你会丢失最近一次提交后你修改的内容

8.远程仓库
	a.创建一个 gitHub 仓库( 链接本地Git和GitHub的前期设置 )
		第一步：创建一个gitHub账号（免费）缺点：所有人都可以看到
		第二步：创建SSH Key ( 本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 )
				Linux：打开 Shell
				Windows：打开Git Bash
				输入：ssh-keygen -t rsa -C "youremail@example.com"
				无报错可在用户主目录找到 “.ssh”目录，里面有id_resa和id_rsa.pub
				两个文件，
				id_rsa:私匙（不能泄露）
				id_rsa.pub:公匙（可以放心告诉任何人）
		第三步：设置SSH Key （即在GitHub中设置你的ＳＳＨ　Ｋｅｙ）
				打开　"Account settings", "SSH Keys" 页面，
				点击Add SSH Key
					Title （内容任意无实质性要求）
					Key （输入id_rsa.pub 文件内容 （建议复制粘贴））
		小注：1.为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，
			而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，
			就可以确认只有你自己才能推送
		      2.GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，
		        一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，
			就可以在每台电脑上往GitHub推送了。
		      3.如何使比人看不到自己的Git库。
		      	a.给GitHub公司交钱，把公有仓库变为私有。
			b.自己搭建一个自己的 Git服务器。

	b.添加远程仓库 （先有本地再有远程）
		第一步：添加远程仓库（在github中）
			完成后记住仓库名即可（其实也可以后期在查，只是我们推送只需要仓库名）

		第二步：关联本地仓库和网路仓库
			git remote add XXX git@github.com:***/++++.git
				XXX 远程库访问名字，推荐用“origin”.访问时设置的名字
					（即类似指针在变量中的意义）
				*** 你的github账户名字
				+++ 你刚在上一步创建的远程库名称。（记得加.git后缀）
					  创建时设置的实际名字
		第三步：推送
			第一次推送：
			   git push -u XXX *** ( XXX 远程库访问名字，*** 分支名称（master）) 
				小注：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
					Git不但会把本地的master分支内容推送的远程新的master分支，
					还会把本地的master分支和远程的master分支关联起来
			第二次及以后：
			   git push XXX ***( XXX 远程库访问名字，*** 分支名称（master）)
        c.从远程仓库克隆 （先有远程再有本地）
		git clone git@github.com:XXX/***.git
			XXX 你的github账户名字
			*** 你在github上创建的远程仓库的名称！
9.分支管理
	a.创建和合并分支

		1.创建分支
			git checkout -b dev ( dev 为分支名可自定义 ) 
				git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
				$ git branch dev
				$ git checkout dev
		2.切换分支
				git checkout XXX ( XXX 你要切换到的分支名 )
		3.查看分支
			git branch
				git branch命令会列出所有分支，当前分支前面会标一个*号.
		4.合并分支（默认 fast forward 快进模式）
			git merge XXX　（XXX 需要和 当所在分支 合并的分支名）
		5.删除分支
			git branch -d XXX ( XXX 想要删除的分支名 )
		
		注：查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
	b.解决冲突 （直接进有冲突的文件里面改）
		1.查看分支合并情况
			git log --graph
	c.分支管理策略
		1.No fast forward 模式
			git merge --no-ff -m "XXX" *** 
				（XXX commit *** 需要和 当所在分支 合并的分支名）
		小注：合并分支时，加上--no-ff参数就可以用普通模式合并，
			合并后的历史有分支，能看出来曾经做过合并，
			 而fast forward合并就看不出来曾经做过合并。
	d.bug分支
		1.暂停（暂停当前分支的操作“当前分支未提交就不可以进入下一分支”相当于备份一份）
			git stash
		2.查看暂停分支列表 （查看当前你暂停了几个分支）
			git stash list
		3.恢复 stash（暂停的储存） （恢复被stash的分支）
			git stash apply
		4.删除 stash （暂停的储存列表）
			git stash drop
		5.恢复并删除 stash
			git stash pop
	注：当手头工作没有完成时，先把工作现场git stash一下，
		然后去修复bug，修复后，再git stash pop，回到工作现场。
		
		6.删除未合并分支（强行删除分支）
			git branch -D *** ( *** 要强行删除的分支名 )
				小注：添加一个新功能时，你肯定不希望因为一些实验性质的代码，
					把主分支搞乱了，所以，每添加一个新功能，
					最好新建一个feature分支，在上面开发，完成后，合并，
					最后，删除该feature分支。
	e.多人协作
		1.查看原仓库信息
			git remote  ( 大致信息 )
			git remote -v （详细信息）
			  小注：git remote -v -->显示了可以抓取和推送的origin的地址。
			  	如果没有推送权限，就看不到push的地址。
		2.推送需求说明
			a.master分支是主分支，因此要时刻与远程同步；

			b.dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

			c.bug分支只用于在本地修复bug，就没必要推到远程了，
			除非老板要看看你每周到底修复了几个bug；

			d.feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
		3.解决冲突（多人协作时）
			1.抓取最新提交
				( 本地分支已经与远程连接（这里的连接指的 单独的分支连接） ) 
			 	  git pull
			2.本地分支和远程仓库连接
				git branch --set-upstream *** XXXX/***
					( *** 分支名字，XXXX 远程仓库访问名 )
		小注：多人协作的工作模式通常是这样：

			a.首先，可以试图用git push origin branch-name推送自己的修改；

			b.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

			c.如果合并有冲突，则解决冲突，并在本地提交；

			d.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

			如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接
			 关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
	注：
		查看远程库信息，使用git remote -v；

		本地新建的分支如果不推送到远程，对其他人就是不可见的；

		从本地推送分支，使用git push origin branch-name，如果推送失败，
		 先用git pull抓取远程的新提交；

		在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，
		 本地和远程分支的名称最好一致；

		建立本地分支和远程分支的关联，
		 使用git branch --set-upstream branch-name origin/branch-name；

		从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
10.标签管理
	a.创建标签
		1.默认创建标签 （默认给HEAD创建）
			git tag v1.0 ( v1.0 为你想给的标签 )
		2.给指定commit id 设置tag
			git tag v0.9 0224937 
			  ( v0.9 为你想给的标签，0224937 为你想给的commit id的前几位 )
		3.添加标签时指定说明文字
			$ git tag -a v0.1 -m "version 0.1 released" 3628164
				（ 创建带有说明的标签，用-a指定标签名，-m指定说明文字，
					3628164为你想给的commit id的前几位 ）
		4.创建带秘钥的签名 （具体没看等有时间了再仔细研究）
			通过-s用私钥签名一个标签：
			$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
			签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，
			 或者没有gpg密钥对，就会报错。
			 如果报错，请参考GnuPG帮助文档配置Key。
		小注：
			命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

			git tag -a <tagname> -m "blablabla..."可以指定标签信息；

			git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

			命令git tag可以查看所有标签。
	b.查看标签
		1.查看本分支所有标签
			git tag
		2.查看指定标签的详细信息
			fit show v0.9 ( v0.9为标签名 )
	c.删除标签
		1.删除本地标签
			git tag -d v0.1 ( v0.1为你要删除的标签 )
		2.推送标签到远程
			git push origin <tagname> ( 推送单个 )
			git push origin --tags （推送全部尚未提交）
		3.删除远程标签
			第一步：删除本地标签
				    git tag -d v0.9
			第二步：删除远程标签
				    git push origin :refs/tags/v0.9

11.自定义Git
	a.改变显示颜色
		 git config --global color.ui true

	b.忽略特殊文件
		1.忽略方法
		   第一步：创建 ".gitignore" 文件
		   第二步：配置 “.gitignore” 文件
			  1.忽略某个文件直接将文件名放入 “.gitignore” 文件即可
			  2.忽略某类文件（可使用正则表达式）
			  	例：
					忽略Python编译产生的.pyc、.pyo、dist等文件或目录：

					# Python:
					*.py[cod]
					*.so
					*.egg
					*.egg-info
			   3.忽略文件夹
			   	直接填入文件夹名字
		 2.强制添加被忽略类型的文件
		 	git add -f 文件名
			 小注：-f强制添加到Git
		 3.查看“.gitignore” 文件规则
		 	git check-ignore -v 文件名
		小结：
			忽略某些文件时，需要编写.gitignore；

			.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
	c.配置别名（给git 命令改）
		git config --global alias.st status
			（st 为你取的别名 status 为原名）
		配置文件
		 	配置Git的时候，加上--global是针对当前用户起作用的，
		 	 如果不加，那只针对当前的仓库起作用。

			 配置文件位置：.git/config
			 配置别名也可以直接修改这个文件，如果改错了，
			  可以删掉文件重新通过命令配置。
12.搭建git服务器（这里其实是属于前面哪章的，只是我觉得重要就单独提出来了）
	
